<?= $this->partial('/common/header.phtml', $this) ?>
<script src="https://meet.jit.si/libs/lib-jitsi-meet.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css" />
<style>
body, div.container-fluid {
    height: 100%;
    max-height: 100%;
}
#feature-area {
    position: fixed;
    top: 62px;
	width: 90%;
}

.member-image {
    width: 120px;
    height: 120px;
}

#member-area {
    position: fixed;
    width: 140px;
    top: 0px;
    right: 0px;
    height: 100%;
    text-align: center;
}

#member-list .v-1,.v-2,.v-3,.v-4,.v-5 {
	opacity: 0%;
	position: absolute;
	left: 0px;
}
#member-list .v-1 {
	top: 0px;
}
#member-list .v-2 {
	top: 20px;
}
#member-list .v-3 {
	top: 40px;
}
#member-list .v-4 {
	top: 60px;
}
#member-list .v-5 {
	top: 80px;
}

#member-list {
    overflow-x: hidden;
    overflow-y: auto;
    height: 100%;
}
.member-box {
    height: 120px;
    width: 120px;
    position: relative;
}
.member-avatar {
    width: 120px;
    height: 120px;
}
.member-video {
    width: 120px;
    height: 120px;
    position: absolute;
    top: 0px;
    left: 0px;
    display: none;
}
.member-box.has-video .member-video {
    display: block;
}
.member-box.has-video .member-avatar {
    width: 32px;
    height: 32px;
}
.member-box.has-video .member-image {
    width: 32px;
    height: 32px;
    opacity: 50%;
}
.member-status {
	position: absolute;
	top: 0px;
	right: 0px;
}

.member-displayname {
    position: absolute;
    bottom: 0px;
    left: 0px;
    background-color: rgba(255,255,255,0.5);
}
#main-area {
    position: fixed;
    left: 0px;
    bottom: 0px;
    top: 110px;
    right: 140px;
}
html {
        height: 100%;
}
.col {
    height: 100%;
    max-height: 100%;
    overflow: scroll;
}
#message {
    overflow: scroll;
    height: 100%;
}

#track-video {
	width: 100%;
	height: 100%;
	display: none;
}

#main-no-video {
	width: 100%;
	height: 100%;
	position: relative;
}

#main-no-video .card {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);

}

.has-video #main-no-video {
	display: none;
}

.has-video #track-video {
	display: block;
}

#jitsi-logo {
    position: absolute;
    bottom: 0px;
    left: 0px;
    background: black;
}

#chat-area {
	position: fixed;
	width: 250px;
	top: 0px;
	right: 140px;
	height: 100%;
	background: white;
}

#chat-area .card {
	height: 100%;
}

#chat-area .message {
	background: white;
}

#chat-area .message .content {
    overflow: hidden;
    padding-bottom: 10px;
}

#chat-area .message {
    clear: both;
}

#chat-area .card-body {
	overflow: scroll;
}

</style>
<div id="feature-area">
    <h1 style="display: inline; float: left; width: 40%"><input type="text" id="title" value="" readonly="readonly"  style="width: 100%"></h1>
	<div class="list-group list-group-horizontal">
		<a href="#" class="list-group-item active main-switch" id="main-switch-hackmd">共筆</a>
		<a href="#" class="list-group-item main-switch" id="main-switch-video">影音畫面</a>
		<a href="#" class="list-group-item" id="chat-switch">聊天
			<span class="badge badge-primary badge-pill" style="display:none">0</span>
		</a>
        <div class="list-group-item">
        <div class="custom-control custom-switch" style="float: left">
            <input type="checkbox" class="custom-control-input" id="auth-microphone">
            <label class="custom-control-label" for="auth-microphone">麥克風</label>
        </div>
        </div>
        <div class="list-group-item">
        <div class="custom-control custom-switch" style="float: left">
            <input type="checkbox" class="custom-control-input" id="auth-camera">
            <label class="custom-control-label" for="auth-camera">攝影機</label>
        </div>
        </div>
        <div class="list-group-item">
        <div class="custom-control custom-switch" style="float: left">
            <input type="checkbox" class="custom-control-input" id="auth-screen">
            <label class="custom-control-label" for="auth-screen">螢幕分享</label>
        </div>
        </div>
    </div>
</div>
<div id="main-area">
	<div class="main-area-section" id="main-area-hackmd" style="width: 100%; height: 100%">
        <iframe src="" style="width: 100%; height: 100%"></iframe>
    </div>
    <div class="main-area-section" id="main-area-video" style="width: 100%; height: 100%; display:none; ">
        <video autoplay="1" style="width: 100%; height: 100%" id="track-video"></video>
		<div id="main-no-video">
			<div class="card" style="width: 256px;">
				<img src="..." class="card-img-top" alt="..." width="256" height="256">
				<div class="card-body">
					<h5 class="card-title">Card title</h5>
					<p class="card-text"></p>
				</div>
			</div>
        </div>
        <div id="jitsi-logo"><a href="http://jitsi.org/" target="_blank"><img src="https://meet.jit.si/images/watermark.png" width="100" height="45"></a></div>
    </div>
</div>
<div id="member-area">
<script id="tmpl-member-box" type="text/html">
<div class="member-box">
<div class="member-avatar">
<img class="member-image rounded" src="" style="display:none">
<div class="member-nointro" style="display:none">無自介使用者</div>
</div>
<video class="member-video" autoplay="1"></video>
<span class="member-displayname">Fellow Jitster</span>
<span class="member-status">
<i class="volume-status fas fa-volume-mute" style="display:none"></i>
<i class="microphone-status fas fa-microphone-alt"></i>
<i class="video-status fas fa-video"></i>
</span>
<span class="v-all v-1 v-a"><i class="fas fa-circle"></i></span>
<span class="v-all v-2 v-b"><i class="fas fa-circle"></i></span>
<span class="v-all v-3 v-c"><i class="fas fa-circle"></i></span>
<span class="v-all v-4 v-b"><i class="fas fa-circle"></i></span>
<span class="v-all v-5 v-a"><i class="fas fa-circle"></i></span>
</div>
</script>
<div id="audio-pool"></div>
<div id="member-list">
	<div class="member-box" id="member-me" style="display:none">
	<div class="member-avatar">
        <img class="member-image rounded" src="">
	</div>
    <video class="member-video" autoplay="1"></video>
	<span class="member-displayname">Me</span>
    <span class="member-status">
        <i class="volume-status fas fa-volume-mute" style="display:none"></i>
		<i class="microphone-status fas fa-microphone-alt-slash"></i>
		<i class="video-status fas fa-video-slash"></i>
	</span>
	<span class="v-all v-1 v-a"><i class="fas fa-circle"></i></span>
	<span class="v-all v-2 v-b"><i class="fas fa-circle"></i></span>
	<span class="v-all v-3 v-c"><i class="fas fa-circle"></i></span>
	<span class="v-all v-4 v-b"><i class="fas fa-circle"></i></span>
	<span class="v-all v-5 v-a"><i class="fas fa-circle"></i></span>
	</div>
</div><!-- #member-list -->
</div><!-- #member-area -->

<script id="tmpl-chat-message" type="text/html">
<div class="message">
    <div class="content">
        <div>
            <span class="user-name" title=""><strong></strong></span>
            <span class="message-time" title=""></span>
        </div>
	</div>
</div>
</script>
<div id="chat-area" style="display:none">
	<div class="card">
	  <div class="card-header">Chat</div>
	  <div class="card-body">
	  </div>
	  <div class="card-footer input-group">
          <form method="post" id="chat-form">
              <div class="input-group-text" style="display:none">
                  <input type="checkbox" name="broadcast">Boardcast
              </div>
              <input type="text" name="talk" class="form-control" placeholder="說些什麼 Say something" aria-label="說些什麼 Say something" aria-describedby="button-addon2">
		  </form>
	</div>
  </div>
</div>

<div id="toast-area" style="position: absolute; bottom: 30px; left: 30px"></div>
<script id="tmpl-toast" type="text/html">
<div class="toast" data-autohide="false">
  <div class="toast-header">
	<svg class="bd-placeholder-img rounded mr-2" width="20" height="20" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" focusable="false" role="img"><rect width="100%" height="100%" fill="#007aff"></rect></svg>
    <strong class="mr-auto">Bootstrap</strong>
    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="toast-body"></div>
</div>
</script>

<script>
/* global $, JitsiMeetJS */

var add_toast = function(title, body, color){
	var dom = $($('#tmpl-toast').html());
	$('.mr-auto', dom).text(title);
	$('.toast-body', dom).text(body);
	$('rect', dom).attr('fill', color);
	$('#toast-area').append(dom);
	dom.toast('show');
};

const options = {
    hosts: {
        domain: 'meet.jit.si',
        muc: 'conference.meet.jit.si'
    },
    bosh: '//meet.jit.si/http-bind',

   // The name of client node advertised in XEP-0115 'c' stanza
   clientNode: 'http://jitsi.org/jitsimeet'
};

var confOptions = {
    openBridgeChannel: true,
    confID: 'g0v-test',
};

let connection = null;
let room = null;

function track_video_attach(track) {
	if (old_track = $('#track-video').data('track')) {
		old_track.detach($('#track-video')[0]);
	}
	track.attach($('#track-video')[0]);
};

/**
 * Handles local tracks.
 * @param tracks Array with JitsiTrack objects
 */
var pending_tracks = [];
function onLocalTracks(tracks) {
    for (let i = 0; i < tracks.length; i++) {
        if (tracks[i].getType() === 'video') {
            if ($('#member-me').data('video-track')) {
                var old_type = $('#member-me').data('video-type');
                if ($('#member-me').data(`${old_type}-track`)) {
                    $('#member-me').data(`${old_type}-track`).dispose();
                    $('#member-me').data(`${old_type}-track`, null);
                    $('#member-me').data('video-track', null);
                    room.removeTrack($('#member-me').data(`${old_type}-track`)).then(function(){
                        room.addTrack(tracks[i]);
                    });
                } else {
                    room.addTrack(tracks[i]);
                }
                $(`#auth-${old_type}`).prop('checked', false);
            } else {
                room.addTrack(tracks[i]);
            }
			if (tracks[i].videoType == 'desktop') {
				$('#member-me').data('screen-track', tracks[i]);
                $('#member-me').data('video-track', tracks[i]);
                $('#member-me').data('video-type', 'screen');
				$('#auth-screen').prop('checked', true);
				$('#member-me .video-status').removeClass('fa-video-slash').addClass('fa-video');
			} else {
				$('#member-me').data('camera-track', tracks[i]);
				$('#member-me').data('video-track', tracks[i]);
                $('#member-me').data('video-type', 'camera');
				$('#auth-camera').prop('checked', true);
				$('#member-me .video-status').removeClass('fa-video-slash').addClass('fa-video');
            }
            tracks[i].attach($('#member-me .member-video')[0]);
            $('#member-me').addClass('has-video');
        } else if (tracks[i].getType() == 'audio') {
			$('#member-me').data('audio-track', tracks[i]);
			$('#auth-microphone').prop('checked', true);
			$('#member-me .microphone-status').removeClass('fa-microphone-alt-slash').addClass('fa-microphone-alt');
			tracks[i].addEventListener(JitsiMeetJS.events.track.TRACK_AUDIO_LEVEL_CHANGED, function(audioLevel) {
				level_changed('me', audioLevel);
			});
			if (isJoined) {
				room.addTrack(tracks[i]);
			} else {
				pending_tracks.push(tracks[i]);
			}
		}
    }
}

function reportUserList()
{
    var users = [];
    users.push([my_info.slack_id, room.getLocalParticipantProperty("login_at")]);
    for (var id in room.participants) {
        users.push([
            room.participants[id].getProperty('slack_id'),
            room.participants[id].getProperty('login_at')
        ]);
    }
    $.post('/meet/reportuserlist/' + <?= json_encode($this->event->id) ?> + '/' + <?= json_encode($this->channel->channel_id) ?>, 'data=' + encodeURIComponent(JSON.stringify(users)));
}

/**
 * Handles remote tracks
 * @param track JitsiTrack object
 */
function onRemoteTrack(track) {
    if (track.isLocal()) {
        return;
    }
    const participant = track.getParticipantId();

    if (track.getType() === 'video') {
		$(`#member-${participant}`).data('video-track', track);
		if (room.participants[participant].isVideoMuted()) {
			$(`#member-${participant} .video-status`).removeClass('fa-video').addClass('fa-video-slash');
            track.detach($(`#member-${participant} .member-video`)[0]);
            $(`#member-${participant}`).removeClass('has-video')
		} else {
            $(`#member-${participant} .video-status`).removeClass('fa-video-slash').addClass('fa-video');
            $(`#member-${participant}`).addClass('has-video')
            track.attach($(`#member-${participant} .member-video`)[0]);
		}
    } else {
		if (!$(`#audio-${participant}`).length) {
			$('#audio-pool').append(`<audio id="audio-${participant}" autoplay="1" class="remote" />`);
		}

		if (old_track = $(`#audio-${participant}`).data('track')) {
			old_track.detach($(`#audio-${participant}`)[0]);
        }
        if ($(`#member-${participant} .volume-status`).is('visible')) {
            $(`#audio-${participant}`)[0].muted = true;
        }
		track.attach($(`#audio-${participant}`)[0]);
		$(`#audio-${participant}`).data('track', track);

		if (room.participants[participant].isAudioMuted()) {
			$(`#member-${participant} .microphone-status`).removeClass('fa-microphone-alt').addClass('fa-microphone-alt-slash');
		} else {
			$(`#member-${participant} .microphone-status`).removeClass('fa-microphone-alt-slash').addClass('fa-microphone-alt');
		}
	}
}

/**
 * That function is executed when the conference is joined
 */

var update_member_list_queue = 0;

var update_member_list = function(){
    if (update_member_list_queue) { // is updating
        update_member_list_queue ++;
        return;
    }
    update_member_list_queue = 1;
    $('.member-box').addClass('checking');
	$('#member-me').removeClass('checking');
    var names = [];
    for (var id in room.participants) {
        var participant = room.participants[id];
        if (null !== participant.getProperty('slack_id')) {
            names.push(participant.getProperty('slack_id'));
        }
    }

    $.get('/event/userinfo/' + <?= json_encode($this->event->id) ?> + '?users=' + encodeURIComponent(names.join(',')), function(ret){
        for (var id in ret.data) {
            user_info[id] = ret.data[id];
        }

        for (var id in room.participants) {
            var participant = room.participants[id];
            if (!$('#member-' + id).length) {
                var member_box = $($('#tmpl-member-box').html());
                member_box.attr('id', `member-${id}`);
                member_box.attr('title', `member-${id}`);
				if (participant.isAudioMuted()) {
					$('.microphone-status', member_box).removeClass('fa-microphone-alt').addClass('fa-microphone-alt-slash');
				} else {
					$('.microphone-status', member_box).removeClass('fa-microphone-alt-slash').addClass('fa-microphone-alt');
				}
				if (participant.isVideoMuted()) {
					$('.video-status', member_box).removeClass('fa-video').addClass('fa-video-slash');
				} else {
					$('.video-status', member_box).removeClass('fa-video-slash').addClass('fa-video');
                }
                $('#member-list').append(member_box);
            }
            $(`#member-${id}`).removeClass('checking');
            if (null !== participant.getProperty('slack_id') && 'undefined' !== typeof(user_info[participant.getProperty('slack_id')])) {
                var info = user_info[participant.getProperty('slack_id')];
                $(`#member-${id} .member-displayname`).text(info.account);
                $(`#member-${id} img`).attr('src', info.avatar);
                $(`#member-${id} .member-image`).show();
                $(`#member-${id} .member-nointro`).hide();
                $(`#member-${id}`).data('info', info);
                $(`#member-${id}`).attr('title', `Keyword: ${info.keyword}`) ;
                $(`#member-${id}`).tooltip({placement: 'top'});
                
            } else {
                if (null === participant.getDisplayName()) {
                    displayname = 'Fellow Jitster';
                } else {
                    displayname = participant.getDisplayName();
                }

                $(`#member-${id} .member-displayname`).text(displayname);
                $(`#member-${id} .member-image`).hide();
                $(`#member-${id} .member-nointro`).show();
                $(`#member-${id}`).attr('title', '');
                $(`#member-${id}`).data('info', null);
            }
        }
        $('.member-box.checking').remove();
        if (update_member_list_queue > 1) {
            update_member_list_queue = 0;
            update_member_list();
        }
        update_member_list_queue = 0;
    }, 'json');
};

var level_changed = function(participant, audioLevel) {
	$(`#member-${participant} .v-all`).css('opacity', '0%');
	if (audioLevel >= 1.0) {
		$(`#member-${participant} .v-a`).css('opacity', '100%');
	} else if (audioLevel > 0.8) {
		$(`#member-${participant} .v-a`).css('opacity', '50%');
	}
	if (audioLevel > 0.6) {
		$(`#member-${participant} .v-b`).css('opacity', '100%');
	} else if (audioLevel > 0.4) {
		$(`#member-${participant} .v-b`).css('opacity', '50%');
	}
	if (audioLevel > 0.2) {
		$(`#member-${participant} .v-c`).css('opacity', '100%');
	} else if (audioLevel > 0.01) {
		$(`#member-${participant} .v-c`).css('opacity', '50%');
	}
};

let isJoined = false;
function onConferenceJoined() {
	isJoined = true;
    room.setLocalParticipantProperty('slack_id', my_info.slack_id);
    room.setLocalParticipantProperty('login_at', (new Date()).getTime());
    room.setDisplayName(my_info.account);
    update_member_list();
    reportUserList();
    setInterval(reportUserList, 60000);
    room.on(
        JitsiMeetJS.events.conference.TRACK_AUDIO_LEVEL_CHANGED,
		level_changed
	);

    room.on(JitsiMeetJS.events.conference.USER_JOINED, (id, user) => {
        update_member_list();
    });
    room.on(JitsiMeetJS.events.conference.DOMINANT_SPEAKER_CHANGED, (id) => {
        $('.member-box').removeClass('member-talking');
        $(`#member-${id}`).addClass('member-talking');
    });
    room.on(JitsiMeetJS.events.conference.MESSAGE_RECEIVED, (id, text, ts, nick, other) => {
		add_chat_message(id, text, ts, nick);
    });
    room.on(JitsiMeetJS.events.conference.ENDPOINT_MESSAGE_RECEIVED, (participant, message) => {
        if (message.type == 'broadcast') {
            add_toast('廣播 Broadcast', message.message);
        }
    });
    room.on(JitsiMeetJS.events.conference.USER_LEFT, (id, user) => {
		if (id == $('#main-area-video').data('playing-user')) {
			$('#main-area-video').data('playing-user', null);
			check_main_video();
		}
        update_member_list();
    });
    room.on(JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED, (id, user) => {
        update_member_list();
    });
    room.on(JitsiMeetJS.events.conference.PARTICIPANT_PROPERTY_CHANGED, (id, text, ts) => {
        update_member_list();
    });
	for (var track of pending_tracks) {
		room.addTrack(track);
	}
}

/**
 * That function is called when connection is established successfully
 */
function onConnectionSuccess() {
    room = connection.initJitsiConference(confOptions.confID, confOptions);
    room.on(JitsiMeetJS.events.conference.TRACK_ADDED, onRemoteTrack);
    room.on(JitsiMeetJS.events.conference.TRACK_REMOVED, track => {
        console.log(`track removed!!!${track}`);
    });
    room.on(
        JitsiMeetJS.events.conference.CONFERENCE_JOINED,
        onConferenceJoined);

    room.on(JitsiMeetJS.events.conference.TRACK_MUTE_CHANGED, track => {
		var id = track.ownerEndpointId;
		if (track.getType() == 'video') {
			if (track.muted) {
                track.detach($(`#member-${id} .member-video`)[0]);
                $(`#member-${id}`).removeClass('has-video')
				$(`#member-${id} .video-status`).removeClass('fa-video').addClass('fa-video-slash');
			} else {
                $(`#member-${id}`).addClass('has-video')
                track.attach($(`#member-${id} .member-video`)[0]);
				$(`#member-${id} .video-status`).removeClass('fa-video-slash').addClass('fa-video');
			}
			if (id == $('#main-area-video').data('playing-user')) {
				$(`#member-${id}`).click();
			}
		} else {
			if (track.muted) {
				$(`#member-${id} .microphone-status`).removeClass('fa-microphone-alt').addClass('fa-microphone-alt-slash');
			} else {
				$(`#member-${id} .microphone-status`).removeClass('fa-microphone-alt-slash').addClass('fa-microphone-alt');
			}
		}
    });
    room.join();
}

function onConnectionFailed() {
    alert('Connection Failed!');
}

function disconnect() {
    connection.removeEventListener(
        JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED,
        onConnectionSuccess);
    connection.removeEventListener(
        JitsiMeetJS.events.connection.CONNECTION_FAILED,
        onConnectionFailed);
    connection.removeEventListener(
        JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED,
        disconnect);
}

function unload() {
    room.leave();
    connection.disconnect();
}


$('#chat-switch').click(function(e){
	e.preventDefault();
    if ($('#chat-switch').is('.active')) {
		$('#chat-area').hide();
		$('#chat-switch').removeClass('active');
	} else {
		$('#chat-area').show();
		$('#chat-switch').addClass('active');
		$('#chat-switch .badge').text(0).hide();
	}
});

$('.main-switch').click(function(e){
	e.preventDefault();
	var tab = $(this).attr('id').split('-')[2];
	$('.main-area-section').hide();
    $('#main-area-' + tab).show();
    if (tab == 'video') {
        check_main_video();
    }
	$('.main-switch').removeClass('active');
    $(this).addClass('active');
});

$(window).bind('beforeunload', unload);
$(window).bind('unload', unload);

JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.ERROR);
const initOptions = {
    disableAudioLevels: false,

    // The ID of the jidesha extension for Chrome.
    desktopSharingChromeExtId: 'mbocklcggfhnbahlnepmldehdhpjfcjp',

    // Whether desktop sharing should be disabled on Chrome.
    desktopSharingChromeDisabled: false,

    // The media sources to use when using screen sharing with the Chrome
    // extension.
    desktopSharingChromeSources: [ 'screen', 'window' ],

    // Required version of Chrome extension
    desktopSharingChromeMinExtVersion: '0.1',

    // Whether desktop sharing should be disabled on Firefox.
    desktopSharingFirefoxDisabled: true
};

var user_info = {};
var my_info;

$.get('/meet/data/' + <?= json_encode($this->event->id) ?> + '/' + <?= json_encode($this->channel->channel_id) ?>, function(ret){
    confOptions.confID = ret.meta.jitsi_room;
    my_info = ret.user;
	$('#member-me .member-image').attr('src', ret.user.avatar);
	$('#member-me').show();
    $('#member-me').data('info', ret.user);
    $('#main-area-hackmd iframe').attr('src', ret.meta.hackmd);
    $('#title').val(ret.meta.title);
    if (ret.user.type == 2) {
        $('#chat-area .input-group-text').show();
    }

    JitsiMeetJS.init(initOptions);

    connection = new JitsiMeetJS.JitsiConnection(null, null, options);

    connection.addEventListener(
        JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED,
        onConnectionSuccess);
    connection.addEventListener(
        JitsiMeetJS.events.connection.CONNECTION_FAILED,
        onConnectionFailed);
    connection.addEventListener(
        JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED,
        disconnect);

    connection.connect();

JitsiMeetJS.createLocalTracks({ devices: [ 'audio' ] })
	.then(onLocalTracks)
	.catch(error => {
		add_toast('權限錯誤 Permission Error', '無法得到麥克風權限 Error obtaining microphone permission. ' + error, '#ff3333');
	});

	if (JitsiMeetJS.mediaDevices.isDeviceChangeAvailable('output')) {
		JitsiMeetJS.mediaDevices.enumerateDevices(devices => {
			const audioOutputDevices
				= devices.filter(d => d.kind === 'audiooutput');

			if (audioOutputDevices.length >= 1) {
				JitsiMeetJS.mediaDevices.setAudioOutputDevice(audioOutputDevices[0].deviceId);
			}
		});
	}

}, 'json');

$('#auth-screen').change(function(e){
	e.preventDefault();

	var screen_track = $('#member-me').data('screen-track');
	if (!screen_track) {
		JitsiMeetJS.createLocalTracks({ devices: [ 'desktop' ] })
			.then(onLocalTracks)
			.catch(error => {
				add_toast('權限錯誤 Permission Error', '無法得到桌面分享權限 Error obtaining desktop share permission. ' + error, '#ff3333');
			});
	} else {
		screen_track.mute().then(function(){
			if ($('#member-me').data('screen-track')) {
				screen_track.dispose();
				$('#member-me').data('screen-track', null);
				$('#member-me').data('video-track', null);
			}
			$('#auth-screen').prop('checked', false);
			$('#member-me').removeClass('has-video');
			screen_track.detach($('#member-me .member-video')[0]);
			$(`#member-me .video-status`).removeClass('fa-video').addClass('fa-video-slash');
		});
	}
});

$('#auth-camera').change(function(e){
	e.preventDefault();

	var camera_track = $('#member-me').data('camera-track');
	if (!camera_track) {
		JitsiMeetJS.createLocalTracks({ devices: [ 'video' ] })
			.then(onLocalTracks)
			.catch(error => {
				$('#auth-camera').prop('checked', false);
				add_toast('權限錯誤 Permission Error', '無法得到攝影機權限 Error obtaining camera permission. ' + error, '#ff3333');
			});
	} else {
		camera_track.mute().then(function(){
			if ($('#member-me').data('camera-track')) {
				camera_track.dispose();
				$('#member-me').data('camera-track', null)
				$('#member-me').data('video-track', null);
			}
			$('#auth-camera').prop('checked', false);
			$('#member-me').removeClass('has-video');
			camera_track.detach($('#member-me .member-video')[0]);
			$(`#member-me .video-status`).removeClass('fa-video').addClass('fa-video-slash');
		});
	}
});

$('#auth-microphone').change(function(e){
	e.preventDefault();

	var audio_track = $('#member-me').data('audio-track');
	if (!audio_track) {
		JitsiMeetJS.createLocalTracks({ devices: [ 'audio' ] })
			.then(onLocalTracks)
			.catch(error => {
				$('#auth-microphone').prop('checked', false);
				add_toast('權限錯誤 Permission Error', '無法得到麥克風權限 Error obtaining microphone permission. ' + error, '#ff3333');
		});
	} else {
		audio_track.mute().then(function(){
			audio_track.dispose();
			$('#member-me').data('audio-track', null);
			$('#auth-microphone').prop('checked', false);
			$(`#member-me .microphone-status`).removeClass('fa-microphone-alt').addClass('fa-microphone-alt-slash');
		});
	}
});

var check_video_stop = function(){
    // force selectParticipant to refetch video if video stops
    $('#member-list video').each(function(){
        var video_dom = this;
        var box_dom = $(this).parents('.member-box');
        var id = box_dom.attr('id').split('-')[1];
        if (id == 'me') {
            return;
        }
        if (!$(this).data('prev_time')) {
            $(this).data('prev_time', video_dom.currentTime);
            return;
        }

        if ($(this).data('prev_time') == video_dom.currentTime) {
            room.selectParticipant(id);
        }
        $(this).data('prev_time', video_dom.currentTime);
    });
};

setInterval(check_video_stop, 3000);

$('#member-list').on('click', '.member-box', function(e){
	e.preventDefault();
    var id = $(this).attr('id').split('-')[1];
	var info = $(this).data('info');
    $('#main-area-video').data('playing-user', id);
	if (info) {
		$('#main-no-video img').attr('src', info.avatar);
		$('#main-no-video .card-title').text('@' + info.account);
		$('#main-no-video .card-text').text('Keyword: ' + info.keyword);
	}

	var track = $(this).data('video-track');
    if (track && !track.muted) {
        room.selectParticipant(id);
        track_video_attach(track);
        $('#main-area-video').addClass('has-video');
    } else {
        $('#main-area-video').removeClass('has-video');
    }
});

var check_main_video = function(){
    var playing_user = $('#main-area-video').data('playing-user');
    if (!playing_user || !$(`#member-${playing_user}`).length) {
		$('.member-box:first()').click();
    }
};

var add_chat_message = function(id, text, ts, nick){
	var d;
	if ('undefined' === typeof(ts)) {
		d = new Date();
	} else {
		d = new Date(ts);
	}

	var dom = $('#chat-area .card-body .message:last');
	if (dom.length && (d.getTime() - dom.data('ts').getTime() < 60 * 2 * 1000) && nick == dom.data('nick')) {
    } else {
		dom = $($('#tmpl-chat-message').html());
		dom.data('ts', d);
		dom.data('nick', nick);
		$('.user-name strong', dom).text(nick);
		$('.message-time', dom).text(('00' + d.getHours()).slice(-2) + ':' + ('00' + d.getMinutes()).slice(-2));
		$('#chat-area .card-body').append(dom);
	}
	$('.content', dom).append($('<div></div>').text(text));
	$('#chat-area .card-body').scrollTop($('#chat-area .card-body').height());

	if (!$('#chat-switch').is('.active')) {
		$('#chat-switch .badge').text(1 + parseInt($('#chat-switch .badge').text())).show();
	}
	
};

$('#chat-form').submit(function(e){
	e.preventDefault();
	var text = $('#chat-form [name="talk"]').val();
	if (!text) {
		return;
    }
    if ($('[name="broadcast"]').prop('checked') == true) {
        $('[name="broadcast"]').prop('checked', false);
        room.broadcastEndpointMessage({type:"broadcast",message:text});
    } else {
        room.sendTextMessage(text);
    }
	$('#chat-form [name="talk"]').val('').focus();
});

$('#member-list').on('click', '.microphone-status', function(e){
    e.preventDefault();
    var member_box_dom = $(this).parents('.member-box');
    var id = member_box_dom.attr('id').split('-')[1];
    if (id == 'me') {
        return;
    }
    var audio_dom = $('#audio-' + id)[0];
    if ($('.volume-status', member_box_dom).is(':visible')) {
        $('.volume-status', member_box_dom).hide();
        if (audio_dom) {
            audio_dom.muted = false;
        }
    } else {
        $('.volume-status', member_box_dom).show();
        if (audio_dom) {
            audio_dom.muted = true;
        }
    }
});


</script>
<?= $this->partial('common/footer.phtml', $this) ?>
