<?= $this->partial('/common/header.phtml', $this) ?>
<script src="https://meet.jit.si/libs/lib-jitsi-meet.min.js"></script>
<style>
body, div.container-fluid {
    height: 100%;
    max-height: 100%;
}
#feature-area {
    position: fixed;
    top: 62px;
}
#member-area {
    position: fixed;
    width: 140px;
    top: 56px;
    right: 0px;
    height: 100%;
    border: 1px solid black;
    text-align: center;
}
#member-list {
    overflow-x: hidden;
    overflow-y: auto;
    height: 100%;
}
.member-box {
    height: 128px;
    width: 128px;
    position: relative;
}
.member-avatar {
    width: 128px;
    height: 128px;
    border: 1px solid black;
}
.member-displayname {
    position: absolute;
    top: 105px;
    left: 4px;
    background-color: rgba(255,255,255,0.5);
}
.member-talking { background-color: yellow; }
#main-area {
    position: fixed;
    left: 0px;
    bottom: 0px;
    top: 110px;
    right: 140px;
    border: 1px solid black;
}
html {
        height: 100%;
}
.col {
    height: 100%;
    max-height: 100%;
    overflow: scroll;
}
#message {
    overflow: scroll;
    height: 100%;
}
</style>
<div id="feature-area">
    <h1 style="display: inline; float: left; width: 40%"><input type="text" id="title" value="" readonly="readonly"  style="width: 100%"></h1>
    <ul class="list-group list-group-horizontal">
        <li class="list-group-item"><a href="#">共筆</a></li>
        <li class="list-group-item"><a href="#">影音畫面</a></li>
        <li class="list-group-item">
        <div class="custom-control custom-switch" style="float: left">
            <input type="checkbox" class="custom-control-input" id="auth-microphone">
            <label class="custom-control-label" for="auth-microphone">麥克風</label>
        </div>
        </li>
        <li class="list-group-item">
        <div class="custom-control custom-switch" style="float: left">
            <input type="checkbox" class="custom-control-input" id="auth-camera">
            <label class="custom-control-label" for="auth-camera">攝影機</label>
        </div>
        </li>
        <li class="list-group-item">
        <div class="custom-control custom-switch" style="float: left">
            <input type="checkbox" class="custom-control-input" id="auth-screen">
            <label class="custom-control-label" for="auth-screen">螢幕分享</label>
        </div>
        </li>
    </ul>
</div>
<div id="main-area">
    <div id="main-area-hackmd" style="width: 100%; height: 100%">
        <iframe src="https://g0v.hackmd.io/@jothon/hsiaothon/" style="width: 100%; height: 100%"></iframe>
    </div>
    <div id="main-area-video" style="width: 100%; height: 100%; display:none; ">
        <video id="track-video" autoplay="1" style="width: 100%; height: 100%"></video>
    </div>
</div>
<div id="member-area">
    <h3>成員名單</h3>
<script id="tmpl-member-box" type="text/html">
<div class="member-box">
<div class="member-avatar">
<img class="member-image" src="" width="120" height="120" style="display:none">
<div class="member-nointro" style="display:none">無自介使用者</div>
</div>
<span class="member-displayname">Fellow Jitster</span>
</div>
</script>
<div id="member-list"></div><!-- #member-list -->
</div><!-- #member-area -->
<script>
/* global $, JitsiMeetJS */

const options = {
    hosts: {
        domain: 'meet.jit.si',
        muc: 'conference.meet.jit.si'
    },
    bosh: '//meet.jit.si/http-bind',

   // The name of client node advertised in XEP-0115 'c' stanza
   clientNode: 'http://jitsi.org/jitsimeet'
};

var confOptions = {
    openBridgeChannel: true,
    confID: 'g0v-test',
};

let connection = null;
let isJoined = false;
let room = null;

let localTracks = [];
videoTracks = {};

/**
 * Handles local tracks.
 * @param tracks Array with JitsiTrack objects
 */
function onLocalTracks(tracks) {
    localTracks = tracks;
    for (let i = 0; i < localTracks.length; i++) {
        if (localTracks[i].getType() === 'video') {
            localTracks[i].attach($('#track-video')[0]);
        }
        if (isJoined) {
            room.addTrack(localTracks[i]);
        }
    }
}

/**
 * Handles remote tracks
 * @param track JitsiTrack object
 */
function onRemoteTrack(track) {
    if (track.isLocal()) {
        return;
    }
    const participant = track.getParticipantId();

    if (track.getType() === 'video') {
        videoTracks[participant] = track;
    }
}

/**
 * That function is executed when the conference is joined
 */
var my_nickname = 'Fellow Jitster';

var update_member_list = function(show_intro){
    $('.member-box').addClass('checking');
    var names = [];
    for (var id in room.participants) {
        var participant = room.participants[id];
        if (null !== participant.getDisplayName()) {
            names.push(participant.getDisplayName());
        }
    }

    $.get('/event/userinfo/' + <?= json_encode($this->event->id) ?> + '?users=' + encodeURIComponent(names.join(',')), function(ret){
        for (var id in ret.data) {
            user_info[id] = ret.data[id];
        }

        for (var id in room.participants) {
            var participant = room.participants[id];
            if (!$('#member-' + id).length) {
                var member_box = $($('#tmpl-member-box').html());
                member_box.attr('id', `member-${id}`);
                member_box.attr('title', `member-${id}`);
                $('#member-list').append(member_box);
            }
            $(`#member-${id}`).removeClass('checking');
            if (null !== participant.getDisplayName() && 'undefined' !== typeof(user_info[participant.getDisplayName()])) {
                var info = user_info[participant.getDisplayName()];
                $(`#member-${id} .member-displayname`).text(info.account);
                $(`#member-${id} img`).attr('src', info.avatar);
                $(`#member-${id} .member-image`).show();
                $(`#member-${id} .member-nointro`).hide();
                $(`#member-${id}`).data('info', info);
            } else {
                if (null === participant.getDisplayName()) {
                    displayname = 'Fellow Jitster';
                } else {
                    displayname = participant.getDisplayName();
                }

                $(`#member-${id} .member-displayname`).text(displayname);
                $(`#member-${id} .member-image`).hide();
                $(`#member-${id} .member-nointro`).show();
                $(`#member-${id}`).data('info', null);
            }
        }
        $('.member-box.checking').remove();
    }, 'json');
};

function onConferenceJoined() {
    room.setDisplayName(my_nickname);
    isJoined = true;
    for (let i = 0; i < localTracks.length; i++) {
        room.addTrack(localTracks[i]);
    }
    update_member_list(true);
    for (var id in room.participants) {
        for (var track_id in room.participants[id].tracks) {
            var track = room.participants[id].tracks[track_id];
            if (track.getType() == 'video') {
                videoTracks[id] = track;
            }
        }
    }
    room.on(JitsiMeetJS.events.conference.USER_JOINED, (id, user) => {
        update_member_list(true);
    });
    room.on(JitsiMeetJS.events.conference.DOMINANT_SPEAKER_CHANGED, (id) => {
        $('.member-box').removeClass('member-talking');
        $(`#member-${id}`).addClass('member-talking');

        if ('undefined' !== typeof(videoTracks[id])) {
            videoTracks[id].attach($('#track-video')[0]);
        }
    });
    room.on(JitsiMeetJS.events.conference.USER_LEFT, (id, user) => {
        onUserLeft(id);
        update_member_list(true);
    });
    room.on(JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED, (id, user) => {
        update_member_list(true);
    });
    room.on(JitsiMeetJS.events.conference.MESSAGE_RECEIVED, (id, text, ts) => {
    });
}

/**
 *
 * @param id
 */
function onUserLeft(id) {
    if ('undefined' !== typeof(videoTracks[id])) {
        videoTracks[id].detach($('#track-video')[0]);
        delete(videoTracks[id]);
    }
}

/**
 * That function is called when connection is established successfully
 */
function onConnectionSuccess() {
    room = connection.initJitsiConference(confOptions.confID, confOptions);
    room.on(JitsiMeetJS.events.conference.TRACK_ADDED, onRemoteTrack);
    room.on(JitsiMeetJS.events.conference.TRACK_REMOVED, track => {
        console.log(`track removed!!!${track}`);
    });
    room.on(
        JitsiMeetJS.events.conference.CONFERENCE_JOINED,
        onConferenceJoined);
    room.on(JitsiMeetJS.events.conference.TRACK_MUTE_CHANGED, track => {
        console.log(`${track.getType()} - ${track.isMuted()}`);
    });
    room.join();
}

function onConnectionFailed() {
    alert('Connection Failed!');
}

function disconnect() {
    connection.removeEventListener(
        JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED,
        onConnectionSuccess);
    connection.removeEventListener(
        JitsiMeetJS.events.connection.CONNECTION_FAILED,
        onConnectionFailed);
    connection.removeEventListener(
        JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED,
        disconnect);
}

function unload() {
    for (let i = 0; i < localTracks.length; i++) {
        localTracks[i].dispose();
    }
    room.leave();
    connection.disconnect();
}

let isVideo = true;

$(window).bind('beforeunload', unload);
$(window).bind('unload', unload);

JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.ERROR);
const initOptions = {
    disableAudioLevels: true,

    // The ID of the jidesha extension for Chrome.
    desktopSharingChromeExtId: 'mbocklcggfhnbahlnepmldehdhpjfcjp',

    // Whether desktop sharing should be disabled on Chrome.
    desktopSharingChromeDisabled: false,

    // The media sources to use when using screen sharing with the Chrome
    // extension.
    desktopSharingChromeSources: [ 'screen', 'window' ],

    // Required version of Chrome extension
    desktopSharingChromeMinExtVersion: '0.1',

    // Whether desktop sharing should be disabled on Firefox.
    desktopSharingFirefoxDisabled: true
};

var user_info = {};

$.get('/meet/data/' + <?= json_encode($this->event->id) ?> + '/' + <?= json_encode($this->channel->channel_id) ?>, function(ret){
    confOptions.confID = ret.meta.jitsi_room;
    my_nickname = ret.user.slack_id;
    $('#title').val(ret.meta.title);

    JitsiMeetJS.init(initOptions);

    connection = new JitsiMeetJS.JitsiConnection(null, null, options);

    connection.addEventListener(
        JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED,
        onConnectionSuccess);
    connection.addEventListener(
        JitsiMeetJS.events.connection.CONNECTION_FAILED,
        onConnectionFailed);
    connection.addEventListener(
        JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED,
        disconnect);

    connection.connect();
}, 'json');

$('#auth-screen').change(function(e){
    JitsiMeetJS.createLocalTracks({ devices: [ 'desktop' ] })
        .then(onLocalTracks)
        .catch(error => {
            throw error;
    });
});
</script>
<?= $this->partial('common/footer.phtml', $this) ?>
